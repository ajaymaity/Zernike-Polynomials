from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
from matplotlib import cm
from matplotlib.ticker import LinearLocator, FormatStrFormatter
import numpy as np
import time

# Make data.
r = np.linspace(0, 1.25, 50)
p = np.linspace(0, 2*np.pi, 50)
R, P = np.meshgrid(r, p)
X, Y = R * np.cos(P), R * np.sin(P)

polynomials = [
    [[1] * X.shape[0]] * X.shape[1],
    X,
    Y,
    -1 + 2 * (X**2 + Y**2),
    X**2 - Y**2,
    2 * X * Y,
    -2 * X + 3 * X * (X**2 + Y**2),
    -2 * Y + 3 * Y * (X**2 + Y**2),
    1 - 6 * (X**2 + Y**2) + 6 * (X**2 + Y**2)**2,
    X**3 - 3 * X * Y**2,
    3 * X**2 * Y - Y**3,
    -3 * X**2 + 3 * Y**2 + 4 * X**2 * (X**2 + Y**2) - 4 * Y**2 * (X**2 + Y**2),
    -6 * X * Y + 8 * X * Y * (X**2 + Y**2),
    3 * X - 12 * X * (X**2 + Y**2) + 10 * X * (X**2 + Y**2)**2,
    3 * Y - 12 * Y * (X**2 + Y**2) + 10 * Y * (X**2 + Y**2)**2,
    -1 + 12 * (X**2 + Y**2) - 30 * (X**2 + Y**2)**2 + 20 * (X**2 + Y**2)**3,
    X**4 - 6 * X**2 * Y**2 + Y**4,
    4 * X**3 * Y - 4 * X * Y**3,
    -4 * X**3 + 12 * X * Y**2 + 5 * X**3 * (X**2 + Y**2) - 15 * X * Y**2 * (X**2 + Y**2),
    -12 * X**2 * Y + 4 * Y**3 + 15 * X**2 * Y * (X**2 + Y**2) - 5 * Y**3 * (X**2 + Y**2),
    6 * X**2 - 6 * Y**2 - 20 * X**2 * (X**2 + Y**2) + 20 * Y**2 * (X**2 + Y**2) + 15 * X**2 * (X**2 + Y**2)**2 - 15 * Y**2 * (X**2 + Y**2)**2,
    12 * X * Y - 40 * X * Y * (X**2 + Y**2) + 30 * X * Y * (X**2 + Y**2)**2,
    -4 * X + 30 * X * (X**2 + Y**2) - 60 * X * (X**2 + Y**2)**2 + 35 * X * (X**2 + Y**2)**3,
    -4 * Y + 30 * Y * (X**2 + Y**2) - 60 * Y * (X**2 + Y**2)**2 + 35 * Y * (X**2 + Y**2)**3,
    1 - 20 * (X**2 + Y**2) + 90 * (X**2 + Y**2)**2 - 140 * (X**2 + Y**2)**3 + 70 * (X**2 + Y**2)**4,
    X**5 - 10 * X**3 * Y**2 + 5 * X * Y**4,
    5 * X**4 * Y - 10 * X**2 * Y**3 + Y**5,
    -5 * X**4 + 30 * X**2 * Y**2 - 5 * Y**4 + 6 * X**4 * (X**2 + Y**2) - 36 * X**2 * Y**2 * (X**2 + Y**2) + 6 * Y**4 * (X**2 + Y**2),
    -20 * X**3 * Y + 20 * X * Y**3 + 24 * X**3 * Y * (X**2 + Y**2) - 24 * X * Y**3 * (X**2 + Y**2),
    10 * X**3 - 30 * X * Y**2 - 30 * X**3 * (X**2 + Y**2) + 90 * X * Y**2 * (X**2 + Y**2) + 21 * X**3 * (X**2 + Y**2)**2 - 63 * X * Y**2 * (X**2 + Y**2)**2,
    30 * X**2 * Y - 10 * Y**3 - 90 * X**2 * Y * (X**2 + Y**2) + 30 * Y**3 * (X**2 + Y**2) + 63 * X**2 * Y * (X**2 + Y**2)**2 - 21 * Y**3 * (X**2 + Y**2)**2,
    -10 * X**2 + 10 * Y**2 + 60 * X**2 * (X**2 + Y**2) - 60 * Y**2 * (X**2 + Y**2) - 105 * X**2 * (X**2 + Y**2)**2 + 105 * Y**2 * (X**2 + Y**2)**2 + 56 * X**2 * (X**2 + Y**2)**3 - 56 * Y**2 * (X**2 + Y**2)**3,
    -20 * X * Y + 120 * X * Y * (X**2 + Y**2) - 210 * X * Y * (X**2 + Y**2)**2 + 112 * X * Y * (X**2 + Y**2)**3,
    5 * X - 60 * X * (X**2 + Y**2) + 210 * X * (X**2 + Y**2)**2 - 280 * X * (X**2 + Y**2)**3 + 126 * X * (X**2 + Y**2)**4,
    5 * Y - 60 * Y * (X**2 + Y**2) + 210 * Y * (X**2 + Y**2)**2 - 280 * Y * (X**2 + Y**2)**3 + 126 * Y * (X**2 + Y**2)**4,
    -1 + 30 * (X**2 + Y**2) - 210 * (X**2 + Y**2)**2 + 560 * (X**2 + Y**2)**3 - 630 * (X**2 + Y**2)**4 + 252 * (X**2 + Y**2)**5,
    X**6 - 15 * X**4 * Y**2 + 15 * X**2 * Y**4 - Y**6,
    6 * X**5 * Y - 20 * X**3 * Y**3 + 6 * X * Y**5,
    -6 * X**5 + 60 * X**3 * Y**2 - 30 * X * Y**4 + 7 * X**5 * (X**2 + Y**2) - 70 * X**3 * Y**2 * (X**2 + Y**2) + 35 * X * Y**4 * (X**2 + Y**2),
    -30 * X**4 * Y + 60 * X**2 * Y**3 - 6 * Y**5 + 35 * X**4 * Y * (X**2 + Y**2) - 70 * X**2 * Y**3 * (X**2 + Y**2) + 7 * Y**5 * (X**2 + Y**2),
    15 * X**4 - 90 * X**2 * Y**2 + 15 * Y**4 - 42 * X**4 * (X**2 + Y**2) + 252 * X**2 * Y**2 * (X**2 + Y**2) - 42 * Y**4 * (X**2 + Y**2) + 28 * X**4 * (X**2 + Y**2)**2 - 168 * X**2 * Y**2 * (X**2 + Y**2)**2 + 28 * Y**4 * (X**2 + Y**2)**2,
    60 * X**3 * Y - 60 * X * Y**3 - 168 * X**3 * Y * (X**2 + Y**2) + 168 * X * Y**3 * (X**2 + Y**2) + 112 * X**3 * Y * (X**2 + Y**2)**2 - 112 * X * Y**3 * (X**2 + Y**2)**2,
    -20 * X**3 + 60 * X * Y**2 + 105 * X**3 * (X**2 + Y**2) - 315 * X * Y**2 * (X**2 + Y**2) - 168 * X**3 * (X**2 + Y**2)**2 + 504 * X * Y**2 * (X**2 + Y**2)**2 + 84 * X**3 * (X**2 + Y**2)**3 - 252 * X * Y**2 * (X**2 + Y**2)**3,
    -60 * X**2 * Y + 20 * Y**3 + 315 * X**2 * Y * (X**2 + Y**2) - 105 * Y**3 * (X**2 + Y**2) - 504 * X**2 * Y * (X**2 + Y**2)**2 + 168 * Y**3 * (X**2 + Y**2)**2 + 252 * X**2 * Y * (X**2 + Y**2)**3 - 84 * Y**3 * (X**2 + Y**2)**3,
    15 * X**2 - 15 * Y**2 - 140 * X**2 * (X**2 + Y**2) + 140 * Y**2 * (X**2 + Y**2) + 420 * X**2 * (X**2 + Y**2)**2 - 420 * Y**2 * (X**2 + Y**2)**2 - 504 * X**2 * (X**2 + Y**2)**3 + 504 * Y**2 * (X**2 + Y**2)**3 + 210 * X**2 * (X**2 + Y**2)**4 - 210 * Y**2 * (X**2 + Y**2)**4,
    30 * X * Y - 280 * X * Y * (X**2 + Y**2) + 840 * X * Y * (X**2 + Y**2)**2 - 1008 * X * Y * (X**2 + Y**2)**3 + 420 * X * Y * (X**2 + Y**2)**4,
    -6 * X + 105 * X * (X**2 + Y**2) - 560 * X * (X**2 + Y**2)**2 + 1260 * X * (X**2 + Y**2)**3 - 1260 * X * (X**2 + Y**2)**4 + 462 * X * (X**2 + Y**2)**5,
    -6 * Y + 105 * Y * (X**2 + Y**2) - 560 * Y * (X**2 + Y**2)**2 + 1260 * Y * (X**2 + Y**2)**3 - 1260 * Y * (X**2 + Y**2)**4 + 462 * Y * (X**2 + Y**2)**5,
    1 - 42 * (X**2 + Y**2) + 420 * (X**2 + Y**2)**2 - 1680 * (X**2 + Y**2)**3 + 3150 * (X**2 + Y**2)**4 - 2772 * (X**2 + Y**2)**5 + 924 * (X**2 + Y**2)**6
]

for idx, polynomial in enumerate(polynomials):

    start = time.time()
    fig = plt.figure(figsize=(8, 6))
    ax1 = fig.add_subplot(1, 2, 1, projection='3d', aspect='equal')

    Z = np.sin(polynomial)

    # Plot the surface.
    surf = ax1.plot_surface(X, Y, Z, cmap=cm.coolwarm,
                        linewidth=0, antialiased=False)

    ax2 = fig.add_subplot(1, 2, 2, aspect='equal')
    ax2.contourf(X, Y, Z, cmap=cm.coolwarm)

    # Add a color bar which maps values to colors.
    fig.colorbar(surf, shrink=0.5, aspect=5)

    ax1.set_axis_off()
    ax2.set_axis_off()

    plt.savefig("plots/%d.png" % (idx), bbox_inches='tight')
    plt.close(fig)
    end = time.time()
    print("Zernike Number #%d completed in %.2f seconds." % (idx, (end - start)))
    
# plt.show()